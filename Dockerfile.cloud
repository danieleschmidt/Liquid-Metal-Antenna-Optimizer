# Multi-stage Dockerfile for Cloud-Native Liquid Metal Antenna Optimizer
FROM python:3.11-slim as builder

# Set build arguments
ARG REGION=us-west
ARG WORKERS=4

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip setuptools wheel
RUN pip install --no-cache-dir -r requirements.txt

# Production stage
FROM python:3.11-slim as production

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Create non-root user
RUN groupadd -r optimizer && useradd -r -g optimizer optimizer
RUN mkdir -p /app && chown optimizer:optimizer /app

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=optimizer:optimizer liquid_metal_antenna/ ./liquid_metal_antenna/
COPY --chown=optimizer:optimizer *.py ./

# Switch to non-root user
USER optimizer

# Set environment variables
ENV PYTHONPATH=/app
ENV REGION=${REGION}
ENV WORKERS=${WORKERS}
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:8000/health || exit 1

# Expose port
EXPOSE 8000

# Run the application
CMD ["python", "-c", "from liquid_metal_antenna.deployment.cloud_native_service import create_service_instance; create_service_instance().run()"]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: liquid-metal-antenna-optimizer
  labels:
    app: liquid-metal-antenna-optimizer
    version: v2.0.0
  annotations:
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: liquid-metal-antenna-optimizer
  template:
    metadata:
      labels:
        app: liquid-metal-antenna-optimizer
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8000"
    spec:
      serviceAccountName: liquid-metal-antenna-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: optimizer
        image: liquid-metal-antenna-optimizer:v2.0.0
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        - name: websocket
          containerPort: 8001
          protocol: TCP
        env:
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: redis-connection
              key: url
        - name: REGION
          valueFrom:
            configMapKeyRef:
              name: optimizer-config
              key: region
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: optimizer-config
              key: workers
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: optimizer-config
              key: log_level
        - name: PROMETHEUS_MULTIPROC_DIR
          value: "/tmp"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
            nvidia.com/gpu: 0
          limits:
            memory: "8Gi"
            cpu: "4000m"
            nvidia.com/gpu: 1
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: optimizer-cache
          mountPath: /app/cache
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 10
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: optimizer-cache
        persistentVolumeClaim:
          claimName: optimizer-cache-pvc
      nodeSelector:
        node-type: compute-optimized
      tolerations:
      - key: "compute-intensive"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - liquid-metal-antenna-optimizer
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 80
            preference:
              matchExpressions:
              - key: instance-type
                operator: In
                values:
                - gpu-optimized
                - compute-optimized
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: liquid-metal-antenna-service
  labels:
    app: liquid-metal-antenna-optimizer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: websocket
    port: 8001
    targetPort: websocket
    protocol: TCP
  selector:
    app: liquid-metal-antenna-optimizer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: liquid-metal-antenna-hpa
  labels:
    app: liquid-metal-antenna-optimizer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: liquid-metal-antenna-optimizer
  minReplicas: 2
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: active_optimizations
      target:
        type: AverageValue
        averageValue: "10"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 5
        periodSeconds: 30

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: optimizer-config
  labels:
    app: liquid-metal-antenna-optimizer
data:
  region: "us-west"
  workers: "4"
  log_level: "INFO"
  redis_max_connections: "100"
  optimization_timeout: "3600"
  max_parallel_jobs: "20"

---
apiVersion: v1
kind: Secret
metadata:
  name: redis-connection
  labels:
    app: liquid-metal-antenna-optimizer
type: Opaque
data:
  # Base64 encoded Redis connection URL
  url: cmVkaXM6Ly9yZWRpcy1zZXJ2aWNlOjYzNzk=  # redis://redis-service:6379

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: liquid-metal-antenna-sa
  labels:
    app: liquid-metal-antenna-optimizer
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: liquid-metal-antenna-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: liquid-metal-antenna-rolebinding
  namespace: default
subjects:
- kind: ServiceAccount
  name: liquid-metal-antenna-sa
  namespace: default
roleRef:
  kind: Role
  name: liquid-metal-antenna-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: optimizer-cache-pvc
  labels:
    app: liquid-metal-antenna-optimizer
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-storage-class
  resources:
    requests:
      storage: 100Gi

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: liquid-metal-antenna-ingress
  labels:
    app: liquid-metal-antenna-optimizer
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.liquid-metal-antenna.com
    secretName: liquid-metal-antenna-tls
  rules:
  - host: api.liquid-metal-antenna.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: liquid-metal-antenna-service
            port:
              number: 80